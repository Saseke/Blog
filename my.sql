-- MySQL dump 10.13  Distrib 5.7.18, for Win64 (x86_64)
--
-- Host: localhost    Database: day8
-- ------------------------------------------------------
-- Server version	5.7.18

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `author`
--

DROP TABLE IF EXISTS `author`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `author` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL,
  `description` varchar(200) NOT NULL,
  `date` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  `image` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `username_idx` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `author`
--

LOCK TABLES `author` WRITE;
/*!40000 ALTER TABLE `author` DISABLE KEYS */;
INSERT INTO `author` VALUES (1,'Yokess','songmengyuan','I am cnuaivdsjkcbnsjk','2017-08-21 01:52:18',1),(2,'lijief','lijie','I am lijie','2017-08-21 13:36:10',0),(3,'eeee','1998','csdcs','2017-08-21 01:47:44',0),(4,'dedd','cdcsdc','I am lijie','2017-08-21 01:47:45',0),(5,'ded','cdcsdc','I am lijie','2017-08-21 01:47:47',0),(6,'de','cdcsdc','I am lijie','2017-08-21 01:47:49',0),(7,'ss','ssssss','aa','2017-08-21 01:47:50',0),(8,'duola','qqqqqqqq','I am de','2017-08-21 01:47:52',0),(9,'s','11111111','ssw','2017-08-21 01:47:54',0),(10,'qwer','12345678',' 我是呼喊山','2017-08-21 01:47:56',0),(11,'hu','huhuhuhu','huhu','2017-08-21 01:48:00',0),(12,'oooe','11111111','I am o','2017-08-21 01:47:58',0),(13,'ooo','11111111','I am o','2017-08-17 10:45:47',0),(14,'qqqe','ssssssss','111','2017-08-20 08:35:18',0),(15,'qqq','ssssssss','111','2017-08-17 10:50:07',0),(16,'fff','ffffffff','dcdc','2017-08-17 10:50:59',0),(17,'ddddd','22222222','ewew','2017-08-17 11:00:47',0),(18,'ffffe','19980724','csdcs','2017-08-20 08:35:19',0),(19,'ddddd','songmengyuan','cnidsnjk','2017-08-17 11:12:48',0),(20,'root','MxsYSEe7GAgSNHPXbEVUCw==','soio','2017-08-17 11:25:03',0),(21,'4444','gJr5lGKLl5ifJ9smyQ0cpA==','fffff','2017-08-17 11:29:01',0),(22,'222','11111111','dddd','2017-08-20 08:42:09',1),(23,'ooooo','cdcsdc','I am lijie','2017-08-18 08:29:01',0),(24,'ooooocsdsd','cdcsdc','I am lijie','2017-08-18 11:45:42',0),(25,'dddd','eeeeeee','cnsodcn','2017-08-20 08:49:35',1),(26,'doke','Sn0e1BRHTkAzrCnMuGU9mw==','I am o','2017-08-20 06:43:51',0),(27,'xiaojie','0HaT+7XPk2KOPBRC6+AmTg==','xiaojie','2017-08-20 02:54:05',0),(28,'small','61wTmahxIRx+ftcy0V46iw==','small','2017-08-20 03:57:17',1),(29,'o','llllll','demo','2017-08-20 09:15:01',1),(30,'dede','iiiiii','descri','2017-08-20 08:53:30',1),(31,'ooocsdsd','cdcsdc','I am lijie','2017-08-20 09:37:34',0),(32,'xiaogou','xiaogou','xiaogou','2017-08-21 01:27:26',0),(33,'ff','ffffff','ff','2017-08-21 01:28:02',0),(34,'rr','rrrrrr','rr','2017-08-21 01:32:57',0),(35,'qq','qqqqqq','qq','2017-08-21 01:36:11',0),(36,'nn','TItAAY+JPUOE/P5gMCy0ag==','nn','2017-08-21 01:51:20',1),(37,'Yoke','mu45Dxk0UCjwO7FsWIVQ4Q==','song','2017-08-21 01:53:23',1),(38,'lijieded','lijie','lijie','2017-08-21 13:48:43',0),(39,'lijie','+4XYQRL+G5LmDELC097a3w==','lijie','2017-08-21 13:49:16',1),(40,'ooocsd','cdcsdc','I am lijie','2017-11-21 11:15:20',0),(41,'dd','tZxnvxlqR1gZHkL3ZnDOug==','dsds','2017-11-21 11:43:16',0),(42,'p','40qIme9kaLdPihBIQZzMiw==','csdcsd','2017-11-21 11:44:20',0);
/*!40000 ALTER TABLE `author` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `file_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `matter` varchar(200) NOT NULL,
  `date` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (1,1,1,'I fro','2017-08-21 07:14:12'),(2,1,1,'I frohfh','2017-08-21 07:35:58'),(3,18,37,'dsd','2017-08-21 09:29:02'),(4,18,37,'你的','2017-08-21 09:37:56'),(5,18,37,'ddddd','2017-08-21 11:07:56'),(6,18,39,'nihao','2017-08-21 13:58:10'),(7,18,39,'xiaoli','2017-08-21 14:11:24'),(8,21,39,'what are you doing','2017-08-22 01:13:07'),(9,21,39,'什么？','2017-08-22 01:21:03'),(10,21,39,'a','2017-08-22 01:21:31'),(11,21,39,'what','2017-08-22 01:21:39'),(12,21,37,'哦','2017-08-22 01:50:55'),(13,21,39,'vedfcd','2017-08-23 01:08:14'),(14,11,37,'lkjnljkn','2017-08-25 09:52:08');
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `file`
--

DROP TABLE IF EXISTS `file`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `file` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `date` timestamp NULL DEFAULT NULL,
  `time` int(255) DEFAULT NULL,
  `author_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `author_file_id` (`author_id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `file`
--

LOCK TABLES `file` WRITE;
/*!40000 ALTER TABLE `file` DISABLE KEYS */;
INSERT INTO `file` VALUES (1,'IO','<p><br />\r\n控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>\r\n    \r\n    \r\n    \r\n    b.构造注入\r\n      \r\n    \r\n    \r\n      </code></pre>\r\n','2017-08-12 16:00:00',19,1),(2,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-01 00:12:06',0,1),(3,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-14 00:37:51',2,1),(4,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-14 06:42:21',1,1),(5,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-14 06:42:21',1,1),(6,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-14 06:56:47',1,1),(7,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-14 07:58:06',2,1),(8,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-19 02:46:34',1,1),(9,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-19 02:49:46',1,1),(10,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-20 02:32:13',0,1),(11,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-20 03:10:33',1,28),(12,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-20 03:36:04',2,28),(13,'IOC','<p>1.IOC&nbsp;<br />\r\na.IOC：控制反转：应用程勋本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护&nbsp;<br />\r\nb.DI(依赖注入) 创建对象并且组装对象之间的关系&nbsp;<br />\r\n2.2.<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\">spring</a>注入&nbsp;<br />\r\n定义：在启动Spring容器加载bean的配置时，完成对成员变量的复制行为&nbsp;<br />\r\n常用的注入方式&nbsp;<br />\r\na.设值注入</p>\r\n\r\n<pre>\r\n<code>&lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;property name=&quot;dao&quot; ref=&quot;FileDao&quot;&gt;&lt;/property&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;\r\n    b.构造注入\r\n      &lt;bean id=&quot;BusinessService&quot; class=&quot;service.BusinessImpl&quot;&gt;\r\n    &lt;constructor-arg ref=&quot;FileDao&quot; name=&quot;dao&quot;/&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=&quot;FileDao&quot; class=&quot;dao.FileDaoImpl&quot;&gt;&lt;/bean&gt;  </code></pre>\r\n','2017-08-20 11:29:23',1,1),(14,'拦截器','<p>&lt;filter&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;url-pattern&gt;*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;</p>\r\n','2017-08-20 12:55:47',1,1),(15,'Mybatis-初学','<p>cniubvcisdfcbhjksdbfv</p>\r\n\r\n<p>cnjdskcn</p>\r\n','2017-08-21 01:16:35',3,1),(16,' linux-配置java，mysql','<p>一。配置<a href=\"http://lib.csdn.net/base/java\" target=\"_blank\" title=\"Java 知识库\">Java</a>环境<br />\r\n1.下载jdk&nbsp;<br />\r\nwget &ndash;no-check-certificate &ndash;no-cookies &ndash;header &ldquo;Cookie: oraclelicense=accept-securebackup-cookie&rdquo;&nbsp;<a href=\"http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz\" target=\"_blank\">http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</a></p>\r\n\r\n<p>2.配置java环<br />\r\nexport JAVA_HOME=/etc/jdk 根据jdk下载的路径不同，写法不同&nbsp;<br />\r\nexport PATH=JAVAHOME/bin:PATH&nbsp;<br />\r\nexport CLASSPATH=.:JAVAHOME/lib/dt.jar:JAVA_HOME/lib/tools.jar&nbsp;</p>\r\n','2017-08-21 01:54:37',4,37),(17,'Mybati','<p>一对多的配置&nbsp;<br />\r\n常见于两张表 设计一个外键&nbsp;<br />\r\n创建两表的bean,并利用list集合建立一对多联系&nbsp;<br />\r\n创建两表的xml文件&nbsp;<br />\r\nleft join&nbsp;<br />\r\n3.给<a href=\"http://lib.csdn.net/base/mysql\" target=\"_blank\" title=\"MySQL知识库\">数据库</a>表起别名&nbsp;<br />\r\n表名后空格加别名&nbsp;<br />\r\n4.关联字表 主表 别名 left join 子表 别名 on 连接条件&nbsp;<br />\r\n5.在xml中体现一对多的关系&nbsp;<br />\r\n<a href=\"http://lib.csdn.net/base/java\" target=\"_blank\" title=\"Java 知识库\">Java</a>中利用的是集合&nbsp;<br />\r\nxml中&nbsp;</p>\r\n','2017-08-21 01:55:54',1,37),(18,'cs','<p>vdfcd sdc dc</p>\r\n','2017-08-21 06:49:14',4,37),(19,'首次登陆与在线查询','<p>一.x window与文本模式的切换&nbsp;<br />\r\n1.<a href=\"http://lib.csdn.net/base/linux\" target=\"_blank\" title=\"Linux知识库\">Linux</a>默认的情况下会提供六个Terminal来让使用者登陆， 切换的方式为使用：[Ctrl] + [Alt] + [F1]~[F6]的组合按钮。&nbsp;<br />\r\n2.[vbird@www ~]：这一行则是正确登陆之后才显示的信息，最左边的vbird显示的是『目前用户的账号』，而@之后接的www则是『主机名』，至于最右边的&nbsp;则指的是『目前所在的目录』，那个则是我们常常讲的『提示字符』&nbsp;<br />\r\n二.文本模式下命令的下达&nbsp;<br />\r\n1.注意：只是改变小写成为大写而已，该命令就变的不存在了&nbsp;<br />\r\n2.基础命令的操作&nbsp;<br />\r\n显示日期与时间的命令： date&nbsp;<br />\r\n显示日历的命令： cal&nbsp;<br />\r\n简单好用的计算器： bc</p>\r\n','2017-08-22 00:32:54',1,37),(20,' Linux-常见命令','<p>常用指令:&nbsp;<br />\r\n***ls 显示文件目录&nbsp;<br />\r\n-l 列出文件的详细信息&nbsp;<br />\r\n-a 列出当前目录下所有的文件及目录，包括隐文件&nbsp;<br />\r\n***mkdir 创建目录&nbsp;<br />\r\n-p 创建目录，若无父目录则创建parent&nbsp;<br />\r\n***cd 切换目录&nbsp;<br />\r\n***touch 创建空文件&nbsp;<br />\r\necho 创建带有内容的文件&nbsp;<br />\r\n***cat 查看文件内容&nbsp;<br />\r\n***cp 拷贝&nbsp;</p>\r\n','2017-08-22 00:34:31',1,37),(21,'diary-1','<p>1.隔行换色：&nbsp;<br />\r\n利用jstl知识，需要jstl.jar 和standar.jar两个包&nbsp;<br />\r\n利用标签</p>\r\n\r\n<p>&lt;c:forEach items=&quot;${messageList}&quot; var=&quot;message&quot; varStatus=&quot;status&quot;&gt; &lt;c:if test=&quot;${status.index%2!=0}&quot;&gt;&lt;tr style=&quot;background-color:#ECF6EE;&quot;&gt;&lt;/c:if&gt;</p>\r\n\r\n<p>2.判断字符串是否为空：</p>\r\n\r\n<pre>\r\n<code>command!=null&amp;&amp;!&quot;&quot;.equals(command.trim())</code></pre>\r\n','2017-08-22 00:41:31',5,37),(22,'Controller的使用','<p>@Controller :处理http请求&nbsp;<br />\r\n@RestController ：= @Controller+@ResponseBody注解&nbsp;<br />\r\n@RequestMapping 需要url映射&nbsp;<br />\r\n处理url里的参数&nbsp;<br />\r\n@pathVariable 获取url中的数据</p>\r\n\r\n<pre>\r\n<code>    @RequestParam  获取请求参数的值\r\n    写两个，两个均能用\r\n     @RequestMapping(value = {&quot;/boot&quot;,&quot;/lo&quot;},method = RequestMethod.GET)\r\n得到界面所传入的值,如果为空，取默认值\r\npublic String hello(@RequestParam(value = &quot;id&quot;,required = false,defaultValue = &quot;0&quot;) Integer myid){\r\n    return &quot;id:&quot;+myid;\r\n}\r\n    @GetMapping 组合注解\r\n     @GetMapping(value = &quot;/boot&quot;)</code></pre>\r\n','2017-08-23 06:24:43',0,39),(23,'Controller的使用','<p>@Controller :处理http请求&nbsp;<br />\r\n@RestController ：= @Controller+@ResponseBody注解&nbsp;<br />\r\n@RequestMapping 需要url映射&nbsp;<br />\r\n处理url里的参数&nbsp;<br />\r\n@pathVariable 获取url中的数据</p>\r\n\r\n<pre>\r\n<code>    @RequestParam  获取请求参数的值\r\n    写两个，两个均能用\r\n     @RequestMapping(value = {&quot;/boot&quot;,&quot;/lo&quot;},method = RequestMethod.GET)\r\n得到界面所传入的值,如果为空，取默认值\r\npublic String hello(@RequestParam(value = &quot;id&quot;,required = false,defaultValue = &quot;0&quot;) Integer myid){\r\n    return &quot;id:&quot;+myid;\r\n}\r\n    @GetMapping 组合注解\r\n     @GetMapping(value = &quot;/boot&quot;)</code></pre>\r\n','2017-08-23 06:26:10',0,39),(24,'Controller的使用','<p>@Controller :处理http请求&nbsp;<br />\r\n@RestController ：= @Controller+@ResponseBody注解&nbsp;<br />\r\n@RequestMapping 需要url映射&nbsp;<br />\r\n处理url里的参数&nbsp;<br />\r\n@pathVariable 获取url中的数据</p>\r\n\r\n<pre>\r\n<code>    @RequestParam  获取请求参数的值\r\n    写两个，两个均能用\r\n     @RequestMapping(value = {&quot;/boot&quot;,&quot;/lo&quot;},method = RequestMethod.GET)\r\n得到界面所传入的值,如果为空，取默认值\r\npublic String hello(@RequestParam(value = &quot;id&quot;,required = false,defaultValue = &quot;0&quot;) Integer myid){\r\n    return &quot;id:&quot;+myid;\r\n}\r\n    @GetMapping 组合注解\r\n     @GetMapping(value = &quot;/boot&quot;)</code></pre>\r\n','2017-08-23 06:28:59',0,39),(25,'事物管理','<p>一.事务&nbsp;<br />\r\n定义.指逻辑上的一组操作，这组操作，要么一起成功，要么一起失败&nbsp;<br />\r\n二.事物的特性&nbsp;<br />\r\n1.原子性&nbsp;<br />\r\n事物是一个不可分割的工作单位事物要么全发生，要么都不发生&nbsp;<br />\r\n2.一致性&nbsp;<br />\r\n事物前后的数据必须保持完整性&nbsp;<br />\r\n3.隔离性&nbsp;<br />\r\n多个用户并发访问<a href=\"http://lib.csdn.net/base/mysql\" target=\"_blank\" title=\"MySQL知识库\">数据库</a>时，一个用户的事务不能被其他事务所干扰，多个并发事务之间的数据要相互隔离&nbsp;<br />\r\n4.持久性&nbsp;<br />\r\n持久性：事务一旦被提交，就是永久性的&nbsp;<br />\r\n三.事务的API&nbsp;<br />\r\nPlatform Transaction Manager&nbsp;<br />\r\n事务管理器&nbsp;<br />\r\nTransaction Definition&nbsp;<br />\r\n事物定义信息（隔离，传播，超时，只读）&nbsp;<br />\r\nTransactionStatus&nbsp;<br />\r\n事务的运行状态</p>\r\n','2017-08-24 08:56:40',0,37);
/*!40000 ALTER TABLE `file` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-11-21 19:59:16
